resources:
  - name: S_PS_DistributeReleaseBundle_5876_0001_BuildInfo
    type: BuildInfo
    configuration:
      sourceArtifactory: s_artifactory
      buildName: 'name'
      buildNumber: '1'
  - name: S_PS_DistributeReleaseBundle_5876_0001_ReleaseBundle
    type: ReleaseBundle
    configuration:
      sourceDistribution: s_distribution_ps_5876
      name: name
      version: '1'
  - name: S_PS_DistributeReleaseBundle_5876_0001_DistributionRule
    type: DistributionRule
    configuration:
      sourceDistribution: s_distribution_ps_5876
      serviceName: "*"
      siteName: "*"
      cityName: "*"
      countryCodes:
        - "*"

pipelines:
  - name: pipeline_S_PS_DistributeReleaseBundle_5876_0001
    configuration:
      nodePool: win_2019
    steps:
      - name: S_PS_DistributeReleaseBundle_5876_0001_1
        type: PowerShell
        configuration:
          integrations:
            - name: s_artifactory
          outputResources:
            - name: S_PS_DistributeReleaseBundle_5876_0001_BuildInfo
        execution:
          onExecute:
            - Set-Content -Path S_PS_DistributeReleaseBundle_5876_0001.txt -Value ${run_id}
            - jfrog rt upload S_PS_DistributeReleaseBundle_5876_0001.txt test-automation-generic-local
            - jfrog rt build-publish ${JFROG_CLI_BUILD_NAME} ${JFROG_CLI_BUILD_NUMBER}
            - write_output S_PS_DistributeReleaseBundle_5876_0001_BuildInfo buildName=${JFROG_CLI_BUILD_NAME} buildNumber=${JFROG_CLI_BUILD_NUMBER}
      - name: S_PS_DistributeReleaseBundle_5876_0001_2
        type: CreateReleaseBundle
        configuration:
          releaseBundleName: ${JFROG_CLI_BUILD_NAME}
          releaseBundleVersion: ${run_id}
          dryRun: false
          sign: true
          inputResources:
            - name: S_PS_DistributeReleaseBundle_5876_0001_BuildInfo
          outputResources:
            - name: S_PS_DistributeReleaseBundle_5876_0001_ReleaseBundle
      - name: S_PS_DistributeReleaseBundle_5876_0001_3
        type: DistributeReleaseBundle
        configuration:
          dryRun: false
          inputResources:
            - name: S_PS_DistributeReleaseBundle_5876_0001_ReleaseBundle
            - name: S_PS_DistributeReleaseBundle_5876_0001_DistributionRule
      - name: S_PS_DistributeReleaseBundle_5876_0001_4
        type: PowerShell
        configuration:
          inputSteps:
            - name: S_PS_DistributeReleaseBundle_5876_0001_3
          inputResources:
            - name: S_PS_DistributeReleaseBundle_5876_0001_ReleaseBundle
        execution:
          onExecute:
            - Write-Output "Deleting distribution..."
            - |
              $distributionUrl = $res_S_PS_DistributeReleaseBundle_5876_0001_ReleaseBundle_sourceDistribution_url
              $encoded_auth = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("${res_S_PS_DistributeReleaseBundle_5876_0001_ReleaseBundle_sourceDistribution_user}:${res_S_PS_DistributeReleaseBundle_5876_0001_ReleaseBundle_sourceDistribution_apikey}"))
              $releaseBundleName = (find_resource_variable "S_PS_DistributeReleaseBundle_5876_0001_ReleaseBundle" name)
              $releaseBundleVersion = (find_resource_variable "S_PS_DistributeReleaseBundle_5876_0001_ReleaseBundle" version)
              Write-Output $distributionUrl
              check_no_verify_ssl
              Set-Content -Path ${step_tmp_dir}\request.json -Value '{"dry_run": false, "distribution_rules": [{"site_name": "*"}], "on_success": "delete"}'
              $headers = @{'Authorization' = "Basic $encoded_auth";'Content-Type' = "application/json"}
              Invoke-WebRequest "${distributionUrl}/api/v1/distribution/${releaseBundleName}/${releaseBundleVersion}/delete" -Method Post -Headers $headers -TimeoutSec 60 -InFile "$step_tmp_dir\request.json" -ContentType 'application/json' -UseBasicParsing -OutFile "${step_tmp_dir}\response" -PassThru
              Remove-Item "$step_tmp_dir\request.json"
              $trackerId = (ConvertFrom-JSON (Get-Content "${step_tmp_dir}\response")).id
              if ("$trackerId" -eq "") { throw "Unable to track distribution without ID" }
              Remove-Item -Force "${step_tmp_dir}\response"
              while ( $True ) {
                try {
                  $Response = Invoke-WebRequest "${distributionUrl}/api/v1/release_bundle/${releaseBundleName}/${releaseBundleVersion}/distribution/${trackerId}" -Method Get -Headers $headers -TimeoutSec 60 -UseBasicParsing -OutFile "${step_tmp_dir}\response" -PassThru
                  $statusCode = $Response.StatusCode
                }
                catch {
                  $statusCode = $_.Exception.Response.StatusCode.value__
                }

                if ($statusCode -eq 404) {
                  break
                } elseif ($statusCode -gt 299) {
                  throw "Distribution returned $statusCode"
                }

                Start-Sleep -Seconds 5
              }
